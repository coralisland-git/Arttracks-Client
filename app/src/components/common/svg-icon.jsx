import React from 'react';

export const svgIconAddAccount = `<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg width="88px" height="88px" viewBox="0 0 88 88" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!-- Generator: Sketch 43.1 (39012) - http://www.bohemiancoding.com/sketch -->
    <title>add account guy</title>
    <desc>Created with Sketch.</desc>
    <defs></defs>
    <g id="Modals" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="Modal-Mock-Zone" transform="translate(-507.000000, -311.000000)" stroke-width="2">
            <g id="Step-1b:-Choose-Account" transform="translate(414.000000, 164.000000)">
                <g id="Accounts-Found" transform="translate(94.000000, 102.000000)">
                    <g id="Add" transform="translate(0.000000, 46.000000)">
                        <g id="add-account-guy">
                            <circle id="Oval-3" stroke="#999999" opacity="0.305678638" stroke-dasharray="4,2" cx="43" cy="43" r="43"></circle>
                            <g id="add-account-icon" transform="translate(21.000000, 21.000000)" stroke="#D9D9D9">
                                <path d="M45,24.5454545 C45,21.8781818 43.2879545,19.6302273 40.9090909,18.7854545 L40.9090909,18.4090909 C40.9090909,8.24113636 32.6679545,0 22.5,0 C12.3320455,0 4.09090909,8.24113636 4.09090909,18.4090909 L4.09090909,18.7854545 C1.71204545,19.6302273 0,21.8781818 0,24.5454545 C0,27.3640909 1.91045455,29.7122727 4.49795455,30.4322727 C6.26522727,38.7552273 13.6513636,45 22.5,45 C31.3486364,45 38.7347727,38.7552273 40.5020455,30.4322727 C43.0895455,29.7122727 45,27.3640909 45,24.5454545 Z" id="Stroke-1"></path>
                                <path d="M22.5,14.3181818 L22.5,34.7727273" id="Stroke-3"></path>
                                <path d="M32.7272727,24.5454545 L12.2727273,24.5454545" id="Stroke-5"></path>
                            </g>
                        </g>
                    </g>
                </g>
            </g>
        </g>
    </g>
</svg>`;

export const svgIconNoAccount = `<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg width="88px" height="88px" viewBox="0 0 88 88" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!-- Generator: Sketch 43.1 (39012) - http://www.bohemiancoding.com/sketch -->
    <title>no account guy</title>
    <desc>Created with Sketch.</desc>
    <defs>
        <polygon id="path-1" points="0 49 49 49 49 0 0 0"></polygon>
    </defs>
    <g id="Publish-Video-Modals" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="Modal-Mock-Zone" transform="translate(-635.000000, -271.000000)">
            <g id="Step-1a:-Connect" transform="translate(414.000000, 164.000000)">
                <g id="No-Account-Found" transform="translate(117.000000, 108.000000)">
                    <g id="no-account-guy" transform="translate(105.000000, 0.000000)">
                        <circle id="Oval-3" stroke="#999999" stroke-width="2" opacity="0.305678638" stroke-dasharray="4,2" cx="43" cy="43" r="43"></circle>
                        <g id="no-account-found-icon" transform="translate(19.000000, 19.000000)">
                            <path d="M46.9583333,26.5416667 C46.9583333,23.8793333 45.2494583,21.6355417 42.875,20.7923333 L42.875,20.4166667 C42.875,10.2675417 34.649125,2.04166667 24.5,2.04166667 C14.350875,2.04166667 6.125,10.2675417 6.125,20.4166667 L6.125,20.7923333 C3.75054167,21.6355417 2.04166667,23.8793333 2.04166667,26.5416667 C2.04166667,29.3550833 3.94858333,31.6989167 6.53129167,32.4175833 C8.29529167,40.725125 15.66775,46.9583333 24.5,46.9583333 C33.33225,46.9583333 40.7047083,40.725125 42.4687083,32.4175833 C45.0514167,31.6989167 46.9583333,29.3550833 46.9583333,26.5416667 Z" id="Stroke-1" stroke="#D9D9D9" stroke-width="2"></path>
                            <mask id="mask-2" fill="white">
                                <use xlink:href="#path-1"></use>
                            </mask>
                            <g id="Clip-4"></g>
                            <polygon id="Fill-3" fill="#D9D9D9" mask="url(#mask-2)" points="22.4583333 36.75 26.5416667 36.75 26.5416667 32.6666667 22.4583333 32.6666667"></polygon>
                            <path d="M26.5416667,30.625 L22.4583333,30.625 L22.4583333,24.5 L24.5,24.5 C26.7519583,24.5 28.5833333,22.668625 28.5833333,20.4166667 C28.5833333,18.1647083 26.7519583,16.3333333 24.5,16.3333333 C22.2480417,16.3333333 20.4166667,18.1647083 20.4166667,20.4166667 L16.3333333,20.4166667 C16.3333333,15.91275 19.9960833,12.25 24.5,12.25 C29.0039167,12.25 32.6666667,15.91275 32.6666667,20.4166667 C32.6666667,24.2141667 30.0594583,27.4155 26.5416667,28.3260833 L26.5416667,30.625 Z" id="Fill-5" fill="#D9D9D9" mask="url(#mask-2)"></path>
                        </g>
                    </g>
                </g>
            </g>
        </g>
    </g>
</svg>`;

export const IconCheckingSvg = (props) => {
    const {primary} = props;
    const fill = primary? '#FFFFFF': '#0BBCEF';

    return (
        <svg width="32px" height="8px" viewBox="0 0 32 8" version="1.1" xmlns="http://www.w3.org/2000/svg">
            <title>dots</title>
            <desc>Created with Sketch.</desc>
            <defs></defs>
            <g id="Publish-Video-Modals" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
                <g id="Modal-Mock-Zone" transform="translate(-842.000000, -537.000000)" fill={fill}>
                    <g id="Step-1b:-Choose-Account" transform="translate(414.000000, 164.000000)">
                        <g id="Processing-Btn" transform="translate(382.000000, 357.000000)">
                            <g id="dots" transform="translate(46.000000, 16.000000)">
                                <circle id="Oval" cx="16" cy="4" r="4"></circle>
                                <ellipse id="Oval" cx="28.8" cy="4" rx="3.2" ry="3.2"></ellipse>
                                <circle id="Oval" cx="3.2" cy="4" r="3.2"></circle>
                            </g>
                        </g>
                    </g>
                </g>
            </g>
        </svg>
    );
}

export const svgIconCheckMark = `<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg width="30px" height="25px" viewBox="0 0 30 25" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!-- Generator: Sketch 43.1 (39012) - http://www.bohemiancoding.com/sketch -->
    <title>checkmark</title>
    <desc>Created with Sketch.</desc>
    <defs></defs>
    <g id="Modals" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="Modal-Mock-Zone" transform="translate(-657.000000, -343.000000)" fill="#FFFFFF">
            <g id="Step-1b:-Choose-Account" transform="translate(414.000000, 164.000000)">
                <g id="Accounts-Found" transform="translate(94.000000, 102.000000)">
                    <g id="Account-Item-2:-Youtube" transform="translate(121.000000, 45.000000)">
                        <g id="YouTube-Account-Avatar">
                            <g id="Account-avatar-(selected)" transform="translate(0.000000, 1.000000)">
                                <polygon id="checkmark" points="53.9495011 31 39.6392774 48.158727 31.4048795 41.2372591 28 45.2879129 40.3072076 55.6365712 58 34.4050344"></polygon>
                            </g>
                        </g>
                    </g>
                </g>
            </g>
        </g>
    </g>
</svg>`;

export const IconCheck = (props) => {
    const {fill} = props;

    let ellipseColor = fill? "#0BBCEF": "#0BBCEF";
    let polygonColor = fill? "#0BBCEF": "#0BBCEF";

    return (
        <svg width="90px" height="90px" viewBox="0 0 90 90" version="1.1" xmlns="http://www.w3.org/2000/svg">
            <title>Success - thick check</title>
            <desc>Created with Sketch.</desc>
            <defs></defs>
            <g id="Modals" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
                <g id="Modal-Mock-Zone" transform="translate(-634.000000, -270.000000)">
                    <g id="Step-3:-Scheduled" transform="translate(414.000000, 164.000000)">
                        <g id="Successfully-submitted" transform="translate(117.000000, 108.000000)">
                            <g id="Success---thick-check" transform="translate(105.000000, 0.000000)">
                                {fill ?
                                    <ellipse id="Oval" fill="#0BBCEF" strokeWidth="3" cx="43" cy="43" rx="43" ry="43"></ellipse>
                                    :
                                    <ellipse id="Oval" stroke="#0BBCEF" strokeWidth="3" cx="43" cy="43" rx="43" ry="43"></ellipse>
                                }
                                <polygon id="Page-1" fill={fill? "#FFFFFF": "#0EBAED"} points="57.4870322 26.4615385 38.5535055 49.1638542 27.6587636 40.0062197 23.1538462 45.3655463 39.4372286 59.0576172 62.8461538 30.9666609"></polygon>
                            </g>
                        </g>
                    </g>
                </g>
            </g>
        </svg>
    );
}

export const svgIconCheck = `<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg width="90px" height="90px" viewBox="0 0 90 90" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!-- Generator: Sketch 43.1 (39012) - http://www.bohemiancoding.com/sketch -->
    <title>Success - thick check</title>
    <desc>Created with Sketch.</desc>
    <defs></defs>
    <g id="Modals" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="Modal-Mock-Zone" transform="translate(-634.000000, -270.000000)">
            <g id="Step-3:-Scheduled" transform="translate(414.000000, 164.000000)">
                <g id="Successfully-submitted" transform="translate(117.000000, 108.000000)">
                    <g id="Success---thick-check" transform="translate(105.000000, 0.000000)">
                        <ellipse id="Oval" stroke="#0BBCEF" stroke-width="3" cx="43" cy="43" rx="43" ry="43"></ellipse>
                        <polygon id="Page-1" fill="#0EBAED" points="57.4870322 26.4615385 38.5535055 49.1638542 27.6587636 40.0062197 23.1538462 45.3655463 39.4372286 59.0576172 62.8461538 30.9666609"></polygon>
                    </g>
                </g>
            </g>
        </g>
    </g>
</svg>`;

export const IconEQSpectrumSvg = (props) => {
    const {eqColor} = props;

    return (
        <svg width="67px" height="60px" viewBox="0 0 67 60">
            <defs></defs>
            <g id="EQ" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
                <g id="360-EQ" transform="translate(-553.000000, -20.000000)" fill={eqColor}>
                    <g id="4-3" transform="translate(553.000000, 20.000000)">
                        <g id="eq-spectrum">
                            <rect id="Rectangle-3" x="0" y="9.5" width="4" height="20.5"></rect>
                            <rect id="Rectangle-3" x="56" y="18.5" width="4" height="11.5"></rect>
                            <rect id="Rectangle-3" x="63" y="23.5" width="4" height="6.5"></rect>
                            <rect id="Rectangle-3" x="49" y="21" width="4" height="9"></rect>
                            <rect id="Rectangle-3" x="42" y="25" width="4" height="5"></rect>
                            <rect id="Rectangle-3" x="35" y="22.5" width="4" height="7.5"></rect>
                            <rect id="Rectangle-3" x="28" y="15" width="4" height="15"></rect>
                            <rect id="Rectangle-3" x="21" y="7.5" width="4" height="22.5"></rect>
                            <rect id="Rectangle-3" x="14" y="4" width="4" height="26"></rect>
                            <rect id="Rectangle-3" x="7" y="0" width="4" height="30"></rect>
                            <rect id="Rectangle-3" transform="translate(2.000000, 40.250000) scale(1, -1) translate(-2.000000, -40.250000) " x="0" y="30" width="4" height="20.5"></rect>
                            <rect id="Rectangle-3" transform="translate(58.000000, 35.750000) scale(1, -1) translate(-58.000000, -35.750000) " x="56" y="30" width="4" height="11.5"></rect>
                            <rect id="Rectangle-3" transform="translate(65.000000, 33.250000) scale(1, -1) translate(-65.000000, -33.250000) " x="63" y="30" width="4" height="6.5"></rect>
                            <rect id="Rectangle-3" transform="translate(51.000000, 34.500000) scale(1, -1) translate(-51.000000, -34.500000) " x="49" y="30" width="4" height="9"></rect>
                            <rect id="Rectangle-3" transform="translate(44.000000, 32.500000) scale(1, -1) translate(-44.000000, -32.500000) " x="42" y="30" width="4" height="5"></rect>
                            <rect id="Rectangle-3" transform="translate(37.000000, 33.750000) scale(1, -1) translate(-37.000000, -33.750000) " x="35" y="30" width="4" height="7.5"></rect>
                            <rect id="Rectangle-3" transform="translate(30.000000, 37.500000) scale(1, -1) translate(-30.000000, -37.500000) " x="28" y="30" width="4" height="15"></rect>
                            <rect id="Rectangle-3" transform="translate(23.000000, 41.250000) scale(1, -1) translate(-23.000000, -41.250000) " x="21" y="30" width="4" height="22.5"></rect>
                            <rect id="Rectangle-3" transform="translate(16.000000, 43.000000) scale(1, -1) translate(-16.000000, -43.000000) " x="14" y="30" width="4" height="26"></rect>
                            <rect id="Rectangle-3" transform="translate(9.000000, 45.000000) scale(1, -1) translate(-9.000000, -45.000000) " x="7" y="30" width="4" height="30"></rect>
                        </g>
                    </g>
                </g>
            </g>
        </svg>
    );
}

export const IconEQBounceSvg = (props) => {
    const {eqColor} = props;

    return (
        <svg width="67px" height="60px" viewBox="0 0 67 60">
            <defs></defs>
            <g id="EQ" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
                <g id="360-EQ" transform="translate(-553.000000, -20.000000)" fill={eqColor}>
                    <g id="4-3" transform="translate(553.000000, 20.000000)">
                        <g id="eq-bounce" transform="translate(0.000000, 17.000000)">
                            <rect id="Rectangle-3" x="0" y="39" width="4" height="5"></rect>
                            <rect id="Rectangle-3" x="56" y="41" width="4" height="3"></rect>
                            <rect id="Rectangle-3" x="63" y="34" width="4" height="10"></rect>
                            <rect id="Rectangle-3" x="49" y="39" width="4" height="5"></rect>
                            <rect id="Rectangle-3" x="42" y="34" width="4" height="10"></rect>
                            <rect id="Rectangle-3" x="35" y="26.5" width="4" height="13"></rect>
                            <rect id="Rectangle-3" x="28" y="25" width="4" height="13"></rect>
                            <rect id="Rectangle-3" x="21" y="17" width="4" height="19"></rect>
                            <rect id="Rectangle-3" x="14" y="0" width="4" height="34"></rect>
                            <rect id="Rectangle-3" x="7" y="13" width="4" height="26"></rect>
                        </g>
                    </g>
                </g>
            </g>
        </svg>
    );
}

export const IconEQNormalSvg = (props) => {
    const {eqColor} = props;

    return (
        <svg width="67px" height="60px" viewBox="0 0 67 60">
            <defs></defs>
            <g id="EQ" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
                <g id="360-EQ" transform="translate(-553.000000, -20.000000)" fill={eqColor}>
                    <g id="4-3" transform="translate(553.000000, 20.000000)">
                        <g id="eq-normal">
                            <rect id="Rectangle-3" x="0" y="19" width="4" height="41"></rect>
                            <rect id="Rectangle-3" x="56" y="37" width="4" height="23"></rect>
                            <rect id="Rectangle-3" x="63" y="47" width="4" height="13"></rect>
                            <rect id="Rectangle-3" x="49" y="42" width="4" height="18"></rect>
                            <rect id="Rectangle-3" x="42" y="50" width="4" height="10"></rect>
                            <rect id="Rectangle-3" x="35" y="45" width="4" height="15"></rect>
                            <rect id="Rectangle-3" x="28" y="30" width="4" height="30"></rect>
                            <rect id="Rectangle-3" x="21" y="15" width="4" height="45"></rect>
                            <rect id="Rectangle-3" x="14" y="8" width="4" height="52"></rect>
                            <rect id="Rectangle-3" x="7" y="0" width="4" height="60"></rect>
                        </g>
                    </g>
                </g>
            </g>
        </svg>
    );
}

export const IconFaq = ({hover}) => {
    if(hover) {
        return (
            <svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg">
                <defs></defs>
                <g id="Icons" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
                    <g transform="translate(-145.000000, -70.000000)" id="faq-icon-active">
                        <g transform="translate(146.000000, 71.000000)">
                            <circle id="Oval" stroke="#2AB8F1" strokeWidth="1.5" cx="11" cy="11" r="11"></circle>
                            <text id="FAQ" fontFamily="ProximaNova-Bold, Proxima Nova" fontSize="16" fontWeight="bold" letterSpacing="-0.400000006" fill="#2AB8F1">
                                <tspan x="7" y="17">?</tspan>
                            </text>
                        </g>
                    </g>
                </g>
            </svg>
        );
    }
    else {
        return (
            <svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg">
                <defs></defs>
                <g id="Icons" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
                    <g transform="translate(-145.000000, -110.000000)" id="faq-icon">
                        <g transform="translate(146.000000, 111.000000)">
                            <circle id="Oval" stroke="#B9BDD2" strokeWidth="1.5" cx="11" cy="11" r="11"></circle>
                            <text id="FAQ" fontFamily="ProximaNova-Bold, Proxima Nova" fontSize="16" fontWeight="bold" letterSpacing="-0.400000006" fill="#B9BDD2">
                                <tspan x="7" y="17">?</tspan>
                            </text>
                        </g>
                    </g>
                </g>
            </svg>
        );
    }
}

export const IconSetting = ({hover}) => {
    const mask = `<use xlink:href="#path-1"></use>`;

    if(hover) {
        return (
            <svg width="22px" height="22px" viewBox="0 0 22 22" version="1.1" xmlns="http://www.w3.org/2000/svg">
                <defs>
                    <polygon id="path-1" points="21.998 21.082 21.998 0 0 0 0 21.082"></polygon>
                </defs>
                <g id="Icons" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
                    <g transform="translate(-106.000000, -71.000000)" id="settings-icon-active">
                        <g transform="translate(106.000000, 71.000000)">
                            <mask id="mask-2" fill="white" dangerouslySetInnerHTML={{__html: mask }} />
                            <g id="Clip-2"></g>
                            <path d="M2.7495,12.374 C1.7375,12.374 0.9165,11.554 0.9165,10.541 C0.9165,9.529 1.7375,8.708 2.7495,8.708 C3.7625,8.708 4.5825,9.529 4.5825,10.541 C4.5825,11.554 3.7625,12.374 2.7495,12.374 L2.7495,12.374 Z M3.2075,19.707 C3.2075,19.96 3.0025,20.165 2.7495,20.165 C2.4965,20.165 2.2915,19.96 2.2915,19.707 L2.2915,13.245 C2.4415,13.27 2.5925,13.291 2.7495,13.291 C2.9065,13.291 3.0585,13.27 3.2075,13.245 L3.2075,19.707 Z M2.2915,1.375 C2.2915,1.122 2.4965,0.917 2.7495,0.917 C3.0025,0.917 3.2075,1.122 3.2075,1.375 L3.2075,7.837 C3.0585,7.812 2.9065,7.791 2.7495,7.791 C2.5925,7.791 2.4415,7.812 2.2915,7.837 L2.2915,1.375 Z M4.1245,8.173 L4.1245,1.375 C4.1245,0.615 3.5085,0 2.7495,0 C1.9905,0 1.3745,0.615 1.3745,1.375 L1.3745,8.173 C0.5565,8.649 -0.0005,9.526 -0.0005,10.541 C-0.0005,11.556 0.5565,12.433 1.3745,12.909 L1.3745,19.707 C1.3745,20.467 1.9905,21.082 2.7495,21.082 C3.5085,21.082 4.1245,20.467 4.1245,19.707 L4.1245,12.909 C4.9425,12.434 5.4995,11.557 5.4995,10.541 C5.4995,9.525 4.9425,8.648 4.1245,8.173 L4.1245,8.173 Z M10.9995,7.791 C9.9865,7.791 9.1665,6.971 9.1665,5.958 C9.1665,4.945 9.9865,4.125 10.9995,4.125 C12.0115,4.125 12.8325,4.945 12.8325,5.958 C12.8325,6.971 12.0115,7.791 10.9995,7.791 L10.9995,7.791 Z M11.4575,19.707 C11.4575,19.96 11.2515,20.165 10.9995,20.165 C10.7465,20.165 10.5405,19.96 10.5405,19.707 L10.5405,8.662 C10.6905,8.687 10.8415,8.708 10.9995,8.708 C11.1565,8.708 11.3075,8.687 11.4575,8.662 L11.4575,19.707 Z M10.5405,1.375 C10.5405,1.122 10.7465,0.917 10.9995,0.917 C11.2515,0.917 11.4575,1.122 11.4575,1.375 L11.4575,3.255 C11.3075,3.229 11.1565,3.209 10.9995,3.209 C10.8415,3.209 10.6905,3.229 10.5405,3.255 L10.5405,1.375 Z M12.3745,3.59 L12.3745,1.375 C12.3745,0.615 11.7585,0 10.9995,0 C10.2395,0 9.6245,0.615 9.6245,1.375 L9.6245,3.59 C8.8055,4.066 8.2495,4.943 8.2495,5.958 C8.2495,6.973 8.8055,7.85 9.6245,8.326 L9.6245,19.707 C9.6245,20.467 10.2395,21.082 10.9995,21.082 C11.7585,21.082 12.3745,20.467 12.3745,19.707 L12.3745,8.326 C13.1925,7.85 13.7495,6.973 13.7495,5.958 C13.7495,4.943 13.1925,4.066 12.3745,3.59 L12.3745,3.59 Z M19.2485,16.957 C18.2355,16.957 17.4155,16.137 17.4155,15.124 C17.4155,14.111 18.2355,13.291 19.2485,13.291 C20.2605,13.291 21.0815,14.111 21.0815,15.124 C21.0815,16.137 20.2605,16.957 19.2485,16.957 L19.2485,16.957 Z M19.7065,19.707 C19.7065,19.96 19.5015,20.165 19.2485,20.165 C18.9955,20.165 18.7905,19.96 18.7905,19.707 L18.7905,17.828 C18.9395,17.853 19.0915,17.874 19.2485,17.874 C19.4055,17.874 19.5565,17.853 19.7065,17.828 L19.7065,19.707 Z M18.7905,1.375 C18.7905,1.122 18.9955,0.917 19.2485,0.917 C19.5015,0.917 19.7065,1.122 19.7065,1.375 L19.7065,12.42 C19.5565,12.395 19.4055,12.374 19.2485,12.374 C19.0915,12.374 18.9395,12.395 18.7905,12.42 L18.7905,1.375 Z M20.6235,12.756 L20.6235,1.375 C20.6235,0.615 20.0075,0 19.2485,0 C18.4895,0 17.8735,0.615 17.8735,1.375 L17.8735,12.756 C17.0555,13.231 16.4985,14.108 16.4985,15.124 C16.4985,16.14 17.0555,17.017 17.8735,17.492 L17.8735,19.707 C17.8735,20.467 18.4895,21.082 19.2485,21.082 C20.0075,21.082 20.6235,20.467 20.6235,19.707 L20.6235,17.492 C21.4415,17.016 21.9985,16.139 21.9985,15.124 C21.9985,14.109 21.4415,13.232 20.6235,12.756 L20.6235,12.756 Z" id="Fill-1" fill="#2AB8F1" mask="url(#mask-2)"></path>
                        </g>
                    </g>
                </g>
            </svg>
        );
    }
    else {
        return (
            <svg width="22px" height="22px" viewBox="0 0 22 22" version="1.1" xmlns="http://www.w3.org/2000/svg">
                <defs>
                    <polygon id="path-1" points="0 21.082 21.998 21.082 21.998 0 0 0"></polygon>
                </defs>
                <g id="Icons" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
                    <g transform="translate(-106.000000, -111.000000)" id="settings-icon">
                        <g transform="translate(106.000000, 111.000000)">
                            <mask id="mask-2" fill="white" dangerouslySetInnerHTML={{__html: mask }} />
                            <g id="Clip-2"></g>
                            <path d="M2.7495,12.374 C1.7375,12.374 0.9165,11.554 0.9165,10.541 C0.9165,9.529 1.7375,8.708 2.7495,8.708 C3.7625,8.708 4.5825,9.529 4.5825,10.541 C4.5825,11.554 3.7625,12.374 2.7495,12.374 L2.7495,12.374 Z M3.2075,19.707 C3.2075,19.96 3.0025,20.165 2.7495,20.165 C2.4965,20.165 2.2915,19.96 2.2915,19.707 L2.2915,13.245 C2.4415,13.27 2.5925,13.291 2.7495,13.291 C2.9065,13.291 3.0585,13.27 3.2075,13.245 L3.2075,19.707 Z M2.2915,1.375 C2.2915,1.122 2.4965,0.917 2.7495,0.917 C3.0025,0.917 3.2075,1.122 3.2075,1.375 L3.2075,7.837 C3.0585,7.812 2.9065,7.791 2.7495,7.791 C2.5925,7.791 2.4415,7.812 2.2915,7.837 L2.2915,1.375 Z M4.1245,8.173 L4.1245,1.375 C4.1245,0.615 3.5085,0 2.7495,0 C1.9905,0 1.3745,0.615 1.3745,1.375 L1.3745,8.173 C0.5565,8.649 -0.0005,9.526 -0.0005,10.541 C-0.0005,11.556 0.5565,12.433 1.3745,12.909 L1.3745,19.707 C1.3745,20.467 1.9905,21.082 2.7495,21.082 C3.5085,21.082 4.1245,20.467 4.1245,19.707 L4.1245,12.909 C4.9425,12.434 5.4995,11.557 5.4995,10.541 C5.4995,9.525 4.9425,8.648 4.1245,8.173 L4.1245,8.173 Z M10.9995,7.791 C9.9865,7.791 9.1665,6.971 9.1665,5.958 C9.1665,4.945 9.9865,4.125 10.9995,4.125 C12.0115,4.125 12.8325,4.945 12.8325,5.958 C12.8325,6.971 12.0115,7.791 10.9995,7.791 L10.9995,7.791 Z M11.4575,19.707 C11.4575,19.96 11.2515,20.165 10.9995,20.165 C10.7465,20.165 10.5405,19.96 10.5405,19.707 L10.5405,8.662 C10.6905,8.687 10.8415,8.708 10.9995,8.708 C11.1565,8.708 11.3075,8.687 11.4575,8.662 L11.4575,19.707 Z M10.5405,1.375 C10.5405,1.122 10.7465,0.917 10.9995,0.917 C11.2515,0.917 11.4575,1.122 11.4575,1.375 L11.4575,3.255 C11.3075,3.229 11.1565,3.209 10.9995,3.209 C10.8415,3.209 10.6905,3.229 10.5405,3.255 L10.5405,1.375 Z M12.3745,3.59 L12.3745,1.375 C12.3745,0.615 11.7585,0 10.9995,0 C10.2395,0 9.6245,0.615 9.6245,1.375 L9.6245,3.59 C8.8055,4.066 8.2495,4.943 8.2495,5.958 C8.2495,6.973 8.8055,7.85 9.6245,8.326 L9.6245,19.707 C9.6245,20.467 10.2395,21.082 10.9995,21.082 C11.7585,21.082 12.3745,20.467 12.3745,19.707 L12.3745,8.326 C13.1925,7.85 13.7495,6.973 13.7495,5.958 C13.7495,4.943 13.1925,4.066 12.3745,3.59 L12.3745,3.59 Z M19.2485,16.957 C18.2355,16.957 17.4155,16.137 17.4155,15.124 C17.4155,14.111 18.2355,13.291 19.2485,13.291 C20.2605,13.291 21.0815,14.111 21.0815,15.124 C21.0815,16.137 20.2605,16.957 19.2485,16.957 L19.2485,16.957 Z M19.7065,19.707 C19.7065,19.96 19.5015,20.165 19.2485,20.165 C18.9955,20.165 18.7905,19.96 18.7905,19.707 L18.7905,17.828 C18.9395,17.853 19.0915,17.874 19.2485,17.874 C19.4055,17.874 19.5565,17.853 19.7065,17.828 L19.7065,19.707 Z M18.7905,1.375 C18.7905,1.122 18.9955,0.917 19.2485,0.917 C19.5015,0.917 19.7065,1.122 19.7065,1.375 L19.7065,12.42 C19.5565,12.395 19.4055,12.374 19.2485,12.374 C19.0915,12.374 18.9395,12.395 18.7905,12.42 L18.7905,1.375 Z M20.6235,12.756 L20.6235,1.375 C20.6235,0.615 20.0075,0 19.2485,0 C18.4895,0 17.8735,0.615 17.8735,1.375 L17.8735,12.756 C17.0555,13.231 16.4985,14.108 16.4985,15.124 C16.4985,16.14 17.0555,17.017 17.8735,17.492 L17.8735,19.707 C17.8735,20.467 18.4895,21.082 19.2485,21.082 C20.0075,21.082 20.6235,20.467 20.6235,19.707 L20.6235,17.492 C21.4415,17.016 21.9985,16.139 21.9985,15.124 C21.9985,14.109 21.4415,13.232 20.6235,12.756 L20.6235,12.756 Z" id="Fill-1" fill="#B9BDD2" mask="url(#mask-2)"></path>
                        </g>
                    </g>
                </g>
            </svg>
        );
    }
}

export const IconVideoPlay = ({hover}) => {
    const mask = `<use xlink:href="#path-1"></use>`;

    if(hover) {
        return (
            <svg width="22px" height="17px" viewBox="0 0 22 17" version="1.1" xmlns="http://www.w3.org/2000/svg">
                <defs>
                    <polygon id="path-1" points="22.002 16.2617 22.002 -0.0003 11.00115 -0.0003 0.0003 -0.0003 0.0003 16.2617 11.00115 16.2617"></polygon>
                </defs>
                <g id="Icons" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
                    <g transform="translate(-65.000000, -73.000000)" id="video-play-icon-active">
                        <g transform="translate(65.000000, 73.000000)">
                            <mask id="mask-2" fill="white" dangerouslySetInnerHTML={{__html: mask }} />
                            <g id="Clip-2"></g>
                            <path d="M6.6963,15.3047 L15.3053,15.3047 C15.5693,15.3047 15.7843,15.5197 15.7843,15.7837 C15.7843,16.0477 15.5693,16.2617 15.3053,16.2617 L6.6963,16.2617 C6.4323,16.2617 6.2173,16.0477 6.2173,15.7837 C6.2173,15.5197 6.4323,15.3047 6.6963,15.3047 L6.6963,15.3047 Z M9.5663,4.3047 C9.6693,4.3047 9.7583,4.3437 9.8353,4.3987 L13.5513,6.7287 C13.7373,6.7947 13.8703,6.9667 13.8703,7.1737 C13.8703,7.3297 13.7923,7.4607 13.6763,7.5487 L9.8633,9.9317 C9.7813,9.9977 9.6803,10.0437 9.5663,10.0437 C9.3013,10.0437 9.0883,9.8297 9.0883,9.5667 L9.0883,4.7837 C9.0883,4.5187 9.3013,4.3047 9.5663,4.3047 L9.5663,4.3047 Z M0.9573,13.3927 L21.0463,13.3927 L21.0463,0.9567 L0.9573,0.9567 L0.9573,13.3927 Z M21.5233,14.3487 L0.4783,14.3487 C0.2143,14.3487 0.0003,14.1347 0.0003,13.8707 L0.0003,0.4787 C0.0003,0.2137 0.2143,-0.0003 0.4783,-0.0003 L21.5233,-0.0003 C21.7883,-0.0003 22.0023,0.2137 22.0023,0.4787 L22.0023,13.8707 C22.0023,14.1347 21.7883,14.3487 21.5233,14.3487 L21.5233,14.3487 Z" id="Fill-1" fill="#0EBAED" mask="url(#mask-2)"></path>
                        </g>
                    </g>
                </g>
            </svg>
        );
    }
    else {
        return (
            <svg width="22px" height="17px" viewBox="0 0 22 17" version="1.1" xmlns="http://www.w3.org/2000/svg">
                <defs>
                    <polygon id="path-1" points="22.002 16.2617 22.002 -0.0003 11.00115 -0.0003 0.0003 -0.0003 0.0003 16.2617 11.00115 16.2617"></polygon>
                </defs>
                <g id="Icons" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
                    <g transform="translate(-65.000000, -113.000000)" id="video-play-icon">
                        <g transform="translate(65.000000, 113.000000)">
                            <mask id="mask-2" fill="white" dangerouslySetInnerHTML={{__html: mask }} />
                            <g id="Clip-2"></g>
                            <path d="M6.6963,15.3047 L15.3053,15.3047 C15.5693,15.3047 15.7843,15.5197 15.7843,15.7837 C15.7843,16.0477 15.5693,16.2617 15.3053,16.2617 L6.6963,16.2617 C6.4323,16.2617 6.2173,16.0477 6.2173,15.7837 C6.2173,15.5197 6.4323,15.3047 6.6963,15.3047 L6.6963,15.3047 Z M9.5663,4.3047 C9.6693,4.3047 9.7583,4.3437 9.8353,4.3987 L13.5513,6.7287 C13.7373,6.7947 13.8703,6.9667 13.8703,7.1737 C13.8703,7.3297 13.7923,7.4607 13.6763,7.5487 L9.8633,9.9317 C9.7813,9.9977 9.6803,10.0437 9.5663,10.0437 C9.3013,10.0437 9.0883,9.8297 9.0883,9.5667 L9.0883,4.7837 C9.0883,4.5187 9.3013,4.3047 9.5663,4.3047 L9.5663,4.3047 Z M0.9573,13.3927 L21.0463,13.3927 L21.0463,0.9567 L0.9573,0.9567 L0.9573,13.3927 Z M21.5233,14.3487 L0.4783,14.3487 C0.2143,14.3487 0.0003,14.1347 0.0003,13.8707 L0.0003,0.4787 C0.0003,0.2137 0.2143,-0.0003 0.4783,-0.0003 L21.5233,-0.0003 C21.7883,-0.0003 22.0023,0.2137 22.0023,0.4787 L22.0023,13.8707 C22.0023,14.1347 21.7883,14.3487 21.5233,14.3487 L21.5233,14.3487 Z" id="Fill-1" fill="#B9BCD4" mask="url(#mask-2)"></path>
                        </g>
                    </g>
                </g>
            </svg>
        );
    }
}

export const IconCoins = () => (
    <svg width="23px" height="23px" viewBox="0 0 23 23" version="1.1" xmlns="http://www.w3.org/2000/svg">
        <defs></defs>
        <g id="Symbols" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd" strokeLinecap="round" strokeLinejoin="round">
            <g id="header-logged-in" transform="translate(-1109.000000, -26.000000)" stroke="#CAC9C9">
                <g id="topHeader">
                    <g id="profile-info-B" transform="translate(979.000000, 13.000000)">
                        <g id="Credits" transform="translate(131.000000, 14.000000)">
                            <g id="coin-icon">
                                <path d="M21,10.5 C21,16.2996522 16.2996522,21 10.5,21 C4.70034783,21 0,16.2996522 0,10.5 C0,4.70034783 4.70034783,0 10.5,0 C16.2996522,0 21,4.70034783 21,10.5 Z" id="Stroke-1420"></path>
                                <path d="M10.5,0 C9.38517391,0 8.31234783,0.176217391 7.30434783,0.499434783 L7.30434783,2.2826087 C7.30434783,3.0386087 7.91791304,3.65217391 8.67391304,3.65217391 L12.326087,3.65217391 C13.082087,3.65217391 13.6956522,3.0386087 13.6956522,2.2826087 L13.6956522,0.499434783 C12.6876522,0.176217391 11.6148261,0 10.5,0 Z" id="Stroke-1422"></path>
                                <path d="M10.5,21 C11.6148261,21 12.6876522,20.8237826 13.6956522,20.5005652 L13.6956522,18.7173913 C13.6956522,17.9613913 13.082087,17.3478261 12.326087,17.3478261 L8.67391304,17.3478261 C7.91791304,17.3478261 7.30434783,17.9613913 7.30434783,18.7173913 L7.30434783,20.5005652 C8.31234783,20.8237826 9.38517391,21 10.5,21 Z" id="Stroke-1424"></path>
                                <path d="M1.407,5.25 C0.850043478,6.216 0.466565217,7.23313043 0.241043478,8.2676087 L1.78591304,9.15873913 C2.44056522,9.53673913 3.27873913,9.31213043 3.65673913,8.65747826 L5.48282609,5.49469565 C5.86082609,4.84004348 5.63621739,4.00186957 4.98156522,3.62386957 L3.43669565,2.73182609 C2.65330435,3.444 1.96395652,4.284 1.407,5.25 Z" id="Stroke-1426"></path>
                                <path d="M19.593,15.75 C20.1499565,14.784 20.5334348,13.7668696 20.7589565,12.7323913 L19.214087,11.8412609 C18.5594348,11.4632609 17.7212609,11.6878696 17.3432609,12.3425217 L15.5171739,15.5053043 C15.1391739,16.1599565 15.3637826,16.9981304 16.0184348,17.3761304 L17.5633043,18.2681739 C18.3466957,17.556 19.0360435,16.716 19.593,15.75 Z" id="Stroke-1428"></path>
                                <path d="M1.407,15.75 C1.96395652,16.716 2.65330435,17.556 3.43669565,18.2681739 L4.98156522,17.3761304 C5.63621739,16.9981304 5.86082609,16.1599565 5.48282609,15.5053043 L3.65673913,12.3425217 C3.27873913,11.6878696 2.44056522,11.4632609 1.78591304,11.8412609 L0.241043478,12.7323913 C0.466565217,13.7668696 0.850043478,14.784 1.407,15.75 Z" id="Stroke-1430"></path>
                                <path d="M19.593,5.25 C19.0360435,4.284 18.3466957,3.444 17.5633043,2.73182609 L16.0184348,3.62386957 C15.3637826,4.00186957 15.1391739,4.84004348 15.5171739,5.49469565 L17.3432609,8.65747826 C17.7212609,9.31213043 18.5594348,9.53673913 19.214087,9.15873913 L20.7589565,8.2676087 C20.5334348,7.23313043 20.1499565,6.216 19.593,5.25 Z" id="Stroke-1432"></path>
                                <path d="M15.5217391,10.5 C15.5217391,13.2738261 13.272913,15.5217391 10.5,15.5217391 C7.72617391,15.5217391 5.47826087,13.2738261 5.47826087,10.5 C5.47826087,7.72617391 7.72617391,5.47826087 10.5,5.47826087 C13.272913,5.47826087 15.5217391,7.72617391 15.5217391,10.5 Z" id="Stroke-1434"></path>
                                <path d="M11.8695652,8.2173913 L10.2717391,8.2173913 C9.64173913,8.2173913 9.13043478,8.72869565 9.13043478,9.35869565 C9.13043478,9.98869565 9.64173913,10.5 10.2717391,10.5 L10.7282609,10.5 C11.3582609,10.5 11.8695652,11.0113043 11.8695652,11.6413043 C11.8695652,12.2713043 11.3582609,12.7826087 10.7282609,12.7826087 L9.13043478,12.7826087" id="Stroke-1436"></path>
                                <path d="M10.5,8.2173913 L10.5,7.30434783" id="Stroke-1438"></path>
                                <path d="M10.5,12.7826087 L10.5,13.6956522" id="Stroke-1440"></path>
                            </g>
                        </g>
                    </g>
                </g>
            </g>
        </g>
    </svg>
);

export const IconLogo = () => {
    const mask = `<use xlink:href="#path-1"></use>`;

    return (
        <svg width="117px" height="33px" viewBox="0 0 117 33" version="1.1" xmlns="http://www.w3.org/2000/svg">
            <defs>
                <polygon id="path-1" points="1.64680581e-05 1.27897692e-14 116.88765 -3.15544362e-30 116.88765 32.74095 1.64680581e-05 32.74095 1.64680581e-05 -8.52651283e-15"></polygon>
            </defs>
            <g id="Symbols" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
                <g id="header-logged-in" transform="translate(-83.000000, -23.000000)">
                    <g id="topHeader">
                        <g id="ArtTracks-logo" transform="translate(83.000000, 23.000000)">
                            <g id="new-logo">
                                <mask id="mask-2" fill="white" dangerouslySetInnerHTML={{__html: mask }} />
                                <g id="Clip-2"></g>
                                <path d="M105.875535,27.80868 C105.315135,26.84433 106.327185,25.81848 108.336885,26.05863 C107.337285,28.04988 106.555935,28.64268 105.875535,27.80868 M68.895885,15.14268 C68.977935,14.29728 69.484035,11.37498 67.908285,12.06903 C67.074885,12.43608 66.609435,13.52703 66.317685,14.96463 C65.603685,18.95898 65.781435,21.04788 66.862335,21.26163 C67.361685,21.33573 67.871385,20.53098 68.379435,18.80613 C68.632335,17.60493 68.747835,16.67148 68.895885,15.14268 M6.441435,21.59943 C5.298135,22.32288 1.230885,24.57318 1.808685,26.19708 C2.262135,27.47298 4.046835,27.03048 4.781385,25.89978 C5.406585,24.93783 6.348585,21.97578 6.441435,21.59943 M12.810285,16.75518 C12.612735,15.58548 12.679635,15.60633 12.625035,14.68143 C12.597585,12.99228 12.652635,11.38683 12.813285,9.88923 C11.715585,12.83118 11.103585,14.39448 10.309785,17.24733 C11.272185,17.00508 11.740035,16.85853 12.810285,16.75518 M46.310835,32.54703 C43.835235,33.65238 40.437135,29.74383 45.995985,28.11873 C54.897285,25.51593 63.415785,26.49228 71.402385,30.52338 C72.534435,31.53018 72.217035,31.83498 70.450185,31.43778 C62.009685,28.55073 53.963385,28.92003 46.310835,32.54703 M47.985735,2.29578 C48.688785,2.25408 49.391085,2.21433 50.093235,2.17683 C56.802285,1.76418 63.356535,1.76148 68.720835,1.77723 C76.684935,1.80063 81.378135,2.56338 83.890335,2.92788 C89.597385,3.75573 89.328885,7.97148 84.051735,7.52418 C71.759385,6.48213 59.695035,5.49573 47.568735,5.38518 C46.616235,10.14873 45.815685,16.68078 45.966885,21.14673 C45.997785,22.06023 46.576785,22.00158 47.105535,21.60228 C48.572835,20.38743 49.972035,16.41903 50.266935,15.16593 C50.411535,14.55168 50.865735,13.33698 50.384385,12.38508 C49.899135,11.42433 48.825735,10.81743 49.236735,9.71103 C50.111685,8.25333 51.466185,10.03098 54.088785,9.95343 C55.993485,10.01763 56.897835,10.04718 56.897835,10.03953 C59.626185,9.91308 60.615585,10.82958 59.926035,12.77583 C59.542185,13.92423 56.514735,21.92433 58.256535,22.03068 C59.104035,21.84378 59.936535,20.88738 60.671235,19.18098 C60.447435,16.99668 60.669435,15.15798 61.320135,13.69368 C61.978035,12.21198 63.112335,11.13213 64.705035,10.39758 C66.844335,9.71808 68.723685,9.82398 70.297035,10.70988 C71.189685,10.04598 72.161385,9.74808 73.172085,10.00248 C75.573435,10.60788 74.834385,12.10293 74.203785,14.68278 C73.841235,16.11078 73.535835,17.78058 73.286685,19.68993 C73.109985,21.60093 73.323585,22.61418 73.965735,22.73538 C74.881785,22.76913 75.736785,21.94983 76.506885,20.29293 C76.250235,17.78628 76.588185,15.75093 77.554635,14.19258 C81.138735,8.41893 90.112935,11.27958 88.904685,17.24433 C88.193835,20.75313 84.491235,19.44108 84.899535,16.62933 C85.187535,15.33198 85.496535,12.77973 84.102135,12.33438 C83.066685,12.30378 82.419735,14.09613 82.080735,16.12053 C81.740985,18.14763 81.684885,20.42238 81.863985,21.36693 C82.609185,24.77298 85.047285,25.07103 89.235135,22.29498 C89.418135,19.89978 89.703435,17.42688 89.902935,15.16803 C90.101685,12.91398 90.282735,10.87908 90.387585,9.39873 C90.596985,6.44808 91.450935,4.64313 92.523435,3.93603 C94.243785,2.80098 98.230185,2.65548 96.673935,7.94043 C95.821185,10.83633 93.872985,12.44298 93.578085,18.80478 C96.174435,14.72253 99.616035,12.38958 102.174435,13.55958 C103.919235,15.01953 104.248785,16.34523 103.195485,18.79413 C102.101385,20.33058 101.192835,21.08238 99.815385,21.73878 C99.776985,21.75723 99.738585,21.77478 99.700185,21.79263 C99.290835,22.03458 99.186435,22.70553 99.387135,23.80563 C99.737085,25.58883 100.189485,26.07378 100.816785,26.16333 C101.852235,26.19873 102.509085,25.71948 103.437435,24.50088 C104.459385,23.15973 105.506985,21.66918 106.058085,19.44558 C104.815035,17.77563 104.795685,16.41558 105.476235,15.25368 C106.188585,14.44398 111.063135,15.01713 111.065835,16.83903 C110.488485,18.31623 109.637985,17.73813 110.270235,18.64698 C112.492185,21.05913 113.837235,22.07148 113.795535,24.62688 C114.557235,24.63978 115.276185,24.24303 115.916985,23.42523 C115.943085,23.22078 116.042685,23.04468 116.219985,22.97013 C116.377335,22.90473 116.577585,22.96683 116.718285,23.12418 C116.847735,23.27328 116.940135,23.51283 116.854485,23.70108 C116.108685,25.32843 115.334535,26.34543 113.832435,26.53953 C112.480185,30.13308 110.019135,30.77403 106.921035,30.02538 C104.206785,28.95573 103.760235,27.45858 105.639885,25.55283 C106.671585,24.92493 107.746335,24.63528 108.817485,24.70458 C109.465635,23.27658 109.106535,22.37103 107.698485,20.64288 C106.344435,23.40228 105.089835,24.95388 103.770435,26.31918 C102.401985,27.73593 101.368185,28.37688 100.224435,28.42368 C97.946085,28.47633 96.384885,27.06948 95.408235,24.20478 C94.861785,22.43433 95.031885,21.37383 95.918535,21.02433 C97.078635,20.66013 98.025885,20.11893 98.759835,19.37028 C99.728685,17.98083 99.801135,16.92513 98.963385,16.24098 C98.183535,15.74703 97.345035,16.14198 96.425085,17.39268 C95.626635,18.47358 94.957035,19.71588 94.273485,21.13128 C93.505335,25.70823 91.712085,27.28563 89.037285,25.92843 C89.063985,24.68643 89.083185,24.07713 89.083185,24.07713 C87.339135,25.53318 85.070085,26.07438 82.276785,25.71618 C80.092335,25.17873 78.357735,23.85543 77.072835,21.70038 C75.727035,23.79033 74.251335,24.74253 72.597885,24.57123 C70.554285,24.21753 69.335685,22.56753 68.893935,19.62708 C68.192385,22.57608 66.819435,23.90058 64.845435,23.66898 C63.109335,23.45538 61.894485,22.47903 61.224885,20.72148 C59.791335,23.12073 58.267785,24.11358 56.592585,23.76873 C53.334585,23.16438 53.588535,18.48768 54.131685,15.94428 C54.469935,14.35818 54.717735,13.99413 53.211285,13.91478 C52.966935,13.90203 53.016285,13.89513 52.766235,13.89378 C52.608435,15.16053 52.133985,16.71033 51.655635,17.90493 C51.026835,19.67028 49.489635,22.28298 47.810985,23.27808 C45.712485,24.55248 44.085135,24.31218 43.023435,22.38048 C41.626485,19.83813 41.527485,11.04873 42.033285,5.44293 C41.201535,5.46873 40.369785,5.50308 39.537285,5.54658 C39.311385,6.75888 39.118785,10.02078 38.992635,11.20263 C38.845485,12.57933 38.733735,13.96398 38.707785,15.19473 C38.672685,17.11068 38.757435,18.99738 38.937735,20.85558 C39.354285,22.91688 39.995685,23.06808 40.956885,21.31458 C41.651985,20.95173 41.824785,21.41208 41.404635,22.70973 C39.359385,25.55283 37.210635,24.90993 34.962585,20.76708 C34.164885,23.77938 32.801235,25.27053 30.800835,25.28853 C29.289885,25.18023 28.175385,24.36423 27.507735,22.85568 C26.829885,21.32628 27.165735,18.84333 27.510285,15.87423 C27.636435,15.26643 26.643585,15.37743 25.627185,15.72513 C25.339635,18.88818 24.801435,21.36318 24.169935,23.18763 C23.544285,24.99498 22.670535,26.15793 21.509835,26.64048 C16.416135,28.33368 14.160135,23.60178 13.213785,19.06143 C11.969085,19.38948 10.665885,19.86528 9.455085,20.40723 C8.977185,22.31013 8.374935,26.00628 6.826185,28.38213 C5.586885,30.28278 3.046485,30.90543 1.251285,29.66328 C-0.563565,28.40853 -0.697515,24.07218 2.830335,21.19908 C3.951585,20.28603 5.558235,18.98058 7.313985,18.09033 C9.975885,8.35953 14.766135,-3.43632 20.705835,0.97683 C20.200785,2.37213 19.732635,3.75723 19.334535,5.14518 C18.938085,6.52743 18.587685,7.92033 18.309285,9.30303 C18.031485,10.68213 17.818035,12.06378 17.677035,13.43838 C17.600985,14.17743 17.431185,14.75568 17.516535,16.48143 C18.807585,16.48143 19.929735,16.65678 21.372135,16.70538 C22.828785,16.75848 22.635435,18.48093 21.698235,18.46443 C20.192835,18.39828 19.079235,18.32598 17.698035,18.34323 C17.997885,22.63683 19.568685,27.19158 22.040685,23.20953 C22.767435,22.03848 23.068335,20.88528 23.323185,19.49418 C23.471835,18.68193 23.646885,17.77788 23.731185,16.86963 C23.819385,15.91998 24.101085,15.19623 22.709685,14.13093 C21.455535,13.17138 21.341535,11.90973 21.738285,11.43003 C22.459935,10.55718 23.854785,11.63028 27.012885,11.36043 C28.633935,11.22033 29.980785,11.08458 31.089285,10.99503 C32.791185,11.06493 33.291585,12.02883 32.637885,13.93023 C32.637885,13.93023 32.274735,15.42513 31.620285,18.42798 C31.088385,21.12228 31.128735,22.74363 31.693935,23.25768 C32.664285,23.82198 33.514035,22.42743 34.291485,19.07763 C33.978735,17.35428 34.063485,15.39453 33.951735,13.74183 C33.891885,12.43023 33.873885,8.25543 34.303935,5.95113 C34.214085,5.96028 34.124085,5.96883 34.033785,5.97843 C28.895835,6.53118 24.765285,7.46328 21.334485,8.57133 C19.362585,9.22638 19.117335,7.19883 20.373435,6.68403 C24.221835,5.10723 28.996785,4.38198 34.330485,3.44868 L34.507035,3.42813 C35.081385,1.53213 36.227985,0.05703 37.931385,0.00168 C39.807135,-0.05907 40.037085,1.50558 39.858735,2.89518 C40.641435,2.82498 41.425485,2.75853 42.210435,2.69568" id="Fill-1" fill="#0EBAED" mask="url(#mask-2)"></path>
                            </g>
                        </g>
                    </g>
                </g>
            </g>
        </svg>
    );
}

export const IconLogoLarge = () => {
    const mask = `<use xlink:href="#path-1"></use>`;

    return (
        <svg width="223px" height="63px" viewBox="0 0 223 63" version="1.1" xmlns="http://www.w3.org/2000/svg">
            <defs>
                <polygon id="path-1" points="3.13878373e-05 2.44168322e-14 222.785863 -6.31088724e-30 222.785863 62.50545 3.13878373e-05 62.50545 3.13878373e-05 -1.62778881e-14"></polygon>
            </defs>
            <g id="Sign-up---Log-in---Forgot/Reset-Password" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
                <g id="Sign-Up" transform="translate(-567.000000, -205.000000)">
                    <g id="ArtTracks-logo" transform="translate(567.000000, 205.000000)">
                        <g id="new-logo">
                            <mask id="mask-2" fill="white" dangerouslySetInnerHTML={{__html: mask }} />
                            <g id="Clip-2"></g>
                            <path d="M201.79696,53.0892982 C200.728847,51.2482664 202.657797,49.2898255 206.488251,49.7482936 C204.58303,53.5497709 203.093791,54.68148 201.79696,53.0892982 M131.314379,28.9087527 C131.470765,27.2948073 132.435383,21.7158709 129.43203,23.0408755 C127.843584,23.7416073 126.956444,25.82433 126.400374,28.5688391 C125.039502,36.1944164 125.378291,40.1823164 127.438468,40.5903845 C128.39022,40.7318482 129.3617,39.1955073 130.330034,35.9026118 C130.812057,33.6094118 131.032198,31.8273709 131.314379,28.9087527 M12.277265,41.2352755 C10.0981547,42.6164073 2.34604577,46.9124345 3.44732269,50.0126073 C4.31159064,52.4484164 7.71319833,51.6036436 9.11323808,49.4450345 C10.3048586,47.6085845 12.1002945,41.9537618 12.277265,41.2352755 M24.4161842,31.9871618 C24.0396573,29.7540982 24.1671676,29.7939027 24.0631009,28.0281845 C24.0107817,24.8034436 24.115706,21.7384936 24.4219022,18.8794391 C22.3297047,24.4958891 21.1632432,27.4803709 19.650274,32.9267209 C21.4845919,32.4642436 22.376306,32.1844664 24.4161842,31.9871618 M88.2676599,62.1352391 C83.5492086,64.2454527 77.0724881,56.7836755 87.6675612,53.6812118 C104.633287,48.71223 120.869402,50.5761709 136.091725,58.2719073 C138.249393,60.19398 137.644434,60.7758709 134.276848,60.01758 C118.1894,54.5059391 102.853289,55.2109664 88.2676599,62.1352391 M91.4599906,4.38285273 C92.7999919,4.30324364 94.1385637,4.22735727 95.4768496,4.15576636 C108.264184,3.36798 120.756473,3.36282545 130.980737,3.39289364 C146.160175,3.43756636 155.105334,4.89372545 159.893544,5.58958909 C170.771084,7.17003 170.259328,15.21828 160.20117,14.3643436 C136.772161,12.3749755 113.777716,10.4918482 90.6651958,10.2807982 C88.8497471,19.3748482 87.3239124,31.8451255 87.6120971,40.37103 C87.6709919,42.1149845 88.774556,42.0030164 89.7823445,41.2407164 C92.5789932,38.9214573 95.2458445,31.3454209 95.8079188,28.9531391 C96.083524,27.78048 96.9492214,25.4615073 96.0317765,23.6442436 C95.1068983,21.8100845 93.0610163,20.6514573 93.8443753,18.5392391 C95.512015,15.7563573 98.0936688,19.1500527 103.0923,19.0020027 C106.722625,19.1245664 108.446301,19.18098 108.446301,19.1663755 C113.646489,18.9249709 115.532269,20.6746527 114.217998,24.3902209 C113.486387,26.5826209 107.716119,41.8555391 111.03596,42.0585709 C112.65128,41.7017618 114.238011,39.8759073 115.638337,36.6182345 C115.211778,32.4482073 115.634906,28.9379618 116.875129,26.14248 C118.129075,23.31378 120.291032,21.2522482 123.326691,19.8499255 C127.40416,18.5526982 130.986169,18.7548709 133.984947,20.4461345 C135.686323,19.1786891 137.538366,18.6099709 139.464743,19.0956436 C144.041675,20.2514073 142.633059,23.1055936 141.431146,28.0307618 C140.740132,30.7569436 140.158044,33.9447436 139.683169,37.5898664 C139.346382,41.2381391 139.7535,43.1725255 140.977427,43.4039073 C142.723402,43.4683391 144.353018,41.9042209 145.820815,38.7410482 C145.331644,33.9556255 145.975771,30.0699573 147.817809,27.0949255 C154.649042,16.0725027 171.753714,21.5337436 169.45081,32.9209936 C168.095942,39.6196118 161.03885,37.1147891 161.817062,31.7469027 C162.365986,29.2701436 162.954934,24.3976664 160.297232,23.5474527 C158.323682,23.4890345 157.090606,26.9107936 156.444478,30.7755573 C155.79692,34.6454755 155.689994,38.98818 156.031356,40.7914118 C157.451694,47.2938709 162.098671,47.8628755 170.080642,42.5631436 C170.429437,37.9904891 170.973214,33.2694982 171.353457,28.9571482 C171.732271,24.6539618 172.07735,20.7691527 172.277192,17.94303 C172.676305,12.3099709 174.303919,8.86415727 176.348086,7.51423909 C179.627043,5.34732545 187.225053,5.06955273 184.258868,15.1590027 C182.633541,20.6875391 178.920305,23.75478 178.35823,35.9000345 C183.306829,28.1066482 189.86646,23.6528345 194.742727,25.8864709 C198.068286,28.6736482 198.696402,31.20453 196.68883,35.8797027 C194.603494,38.8129255 192.871814,40.24818 190.246418,41.5013073 C190.173228,41.53653 190.100038,41.5700345 190.026848,41.6041118 C189.246634,42.0660164 189.04765,43.3469209 189.43018,45.4471118 C190.097179,48.8514027 190.959446,49.7772164 192.155069,49.9481755 C194.128619,50.0157573 195.380564,49.1008255 197.149983,46.7744073 C199.097802,44.21403 201.09451,41.3684345 202.144897,37.12338 C199.775665,33.9352936 199.738784,31.3388345 201.035901,29.1206618 C202.393628,27.5748709 211.684437,28.6690664 211.689583,32.1472391 C210.589164,34.9673482 208.968125,33.8637027 210.173183,35.59878 C214.408182,40.2037936 216.971824,42.1364618 216.892344,47.0149527 C218.344132,47.03958 219.714438,46.2821482 220.935792,44.7208936 C220.985538,44.33058 221.175374,43.9943891 221.513305,43.8520664 C221.813211,43.7272118 222.194884,43.8457664 222.463056,44.1461618 C222.709786,44.4308073 222.885898,44.88813 222.722651,45.2475164 C221.301169,48.3542755 219.825652,50.2958209 216.962675,50.6663755 C214.38531,57.5267891 209.694591,58.7504209 203.789665,57.32118 C198.616351,55.2791209 197.765234,52.4209255 201.347815,48.7826755 C203.314218,47.5839573 205.362673,47.0309891 207.404266,47.1632891 C208.639629,44.4371073 207.955191,42.70833 205.271471,39.4091345 C202.690675,44.67708 200.299429,47.6392255 197.784675,50.2457073 C195.176433,52.9504118 193.206028,54.1740436 191.02606,54.2633891 C186.683564,54.3639027 183.707943,51.6780982 181.846465,46.2091255 C180.804941,42.8291755 181.129148,40.8045845 182.819088,40.1373573 C185.030219,39.4420664 186.835661,38.4088664 188.234557,36.9796255 C190.081169,34.3270391 190.219257,32.3116118 188.62252,31.0055073 C187.136139,30.0625118 185.537973,30.8165073 183.784564,33.2042073 C182.262732,35.2677436 180.986486,37.6394073 179.683651,40.3415345 C178.21957,49.0793482 174.801666,52.0907482 169.703543,49.49973 C169.754433,47.1286391 169.791028,45.96543 169.791028,45.96543 C166.466898,48.7451618 162.142128,49.7783618 156.818146,49.0945255 C152.654621,48.0684845 149.348503,45.5421845 146.899506,41.4279982 C144.334434,45.4179027 141.521775,47.2357391 138.370328,46.9087118 C134.475261,46.2334664 132.15263,43.0834664 131.310662,37.46988 C129.97352,43.0997891 127.356701,45.62838 123.594291,45.1862345 C120.285314,44.7784527 117.96983,42.9145118 116.693584,39.5591891 C113.961262,44.1395755 111.057402,46.0350164 107.8645,45.3766664 C101.654807,44.2229073 102.138832,35.2946618 103.174066,30.43908 C103.818765,27.4110709 104.291068,26.7160664 101.4198,26.56458 C100.954073,26.5402391 101.048133,26.5270664 100.571542,26.5244891 C100.270778,28.94283 99.3664842,31.9015391 98.4547573,34.1821391 C97.2562753,37.5523527 94.3263983,42.5402345 91.1269201,44.4399709 C87.127215,46.8729164 84.0255137,46.4141618 82.0019317,42.7263709 C79.3393688,37.8727936 79.1506765,21.09303 80.1147227,10.3910482 C78.5294214,10.4403027 76.9441201,10.50588 75.3573894,10.5889255 C74.9268278,12.9033164 74.5597355,19.13058 74.3192958,21.3868391 C74.0388304,24.0150845 73.8258368,26.6585073 73.7763765,29.0081209 C73.7094765,32.6658436 73.8710086,36.2677255 74.2146573,39.8151982 C75.0085945,43.7504073 76.2310919,44.0390618 78.0631227,40.6914709 C79.3879714,39.9987573 79.7173253,40.8776073 78.9165265,43.3549391 C75.018315,48.7826755 70.9228342,47.5553209 66.6380894,39.6462436 C65.1176868,45.3969982 62.5185932,48.2437391 58.705865,48.2781027 C55.8260201,48.0713482 53.7018022,46.51353 52.4292727,43.6335709 C51.1373022,40.7138073 51.7774265,35.97363 52.4341329,30.3053482 C52.6745727,29.1450027 50.7822176,29.3569118 48.8449765,30.0207027 C48.2969112,36.0592527 47.2711112,40.7842527 46.0674829,44.2672936 C44.8750047,47.7176891 43.2096522,49.9378664 40.9973778,50.8590982 C31.2888727,54.0915709 26.9889753,45.0579436 25.1852483,36.3900027 C22.8128714,37.01628 20.3289945,37.9246255 18.0212304,38.9592573 C17.1103612,42.5920664 15.9624829,49.6483527 13.0105919,54.1840664 C10.6485073,57.81258 5.80654833,59.0012755 2.38492782,56.6298982 C-1.07414526,54.2344664 -1.32945167,45.95598 5.39457013,40.4709709 C7.53165346,38.7278755 10.5939009,36.2356527 13.9403304,34.5360845 C19.0138663,15.9591027 28.1440009,-6.56024727 39.4649676,1.86485727 C38.5023509,4.52861182 37.610065,7.17289364 36.8512932,9.82261636 C36.0956663,12.4614573 35.4278099,15.12063 34.8971842,17.76033 C34.3677022,20.3931573 33.9608701,23.0308527 33.6921265,25.6550891 C33.5471765,27.0660027 33.2235406,28.1699345 33.3862163,31.4645482 C35.8469355,31.4645482 37.9857342,31.7993073 40.734924,31.8920891 C43.511274,31.9934618 43.1427522,35.2817755 41.356465,35.2502755 C38.4871983,35.1239891 36.3646958,34.9859618 33.7321522,35.0188936 C34.3036612,43.2157664 37.2975791,51.9111982 42.0091688,44.3091027 C43.3943419,42.0734618 43.9678522,39.8718982 44.4535919,37.2161618 C44.7369163,35.6655027 45.0705586,33.9395891 45.2312329,32.2056573 C45.3993406,30.3926891 45.936256,29.0109845 43.2842714,26.97723 C40.8938829,25.1453618 40.6766009,22.7367573 41.4327996,21.8209664 C42.8082522,20.1546164 45.4668124,22.2032618 51.4860971,21.6880936 C54.5757906,21.42063 57.1428637,21.1614709 59.2556458,20.9905118 C62.4994381,21.1239573 63.4531919,22.96413 62.2072509,26.5940755 C62.2072509,26.5940755 61.5150932,29.4479755 60.2677227,35.1806891 C59.2539304,40.3243527 59.3308368,43.4196573 60.4080983,44.4010255 C62.2575688,45.4783255 63.8771778,42.8160027 65.3589842,36.42093 C64.7628881,33.1308982 64.9244201,29.3895573 64.7114265,26.2344027 C64.5973535,23.7304391 64.5630458,15.7603664 65.3827137,11.3612482 C65.2114612,11.3787164 65.0399227,11.3950391 64.8678124,11.4133664 C55.0749676,12.4686164 47.2022099,14.24808 40.6631637,16.3634482 C36.904756,17.6139982 36.4373137,13.7432209 38.8314188,12.7604209 C46.1664035,9.75016636 55.2673765,8.36559818 65.4333176,6.58384364 L65.7698188,6.54461182 C66.8645201,2.92497545 69.0499201,0.108875455 72.2965714,0.00320727273 C75.8717188,-0.11277 76.3099996,2.87428909 75.9700676,5.52716182 C77.4618804,5.39314364 78.9562663,5.26628455 80.4523676,5.14629818" id="Fill-1" fill="#0EBAED" mask="url(#mask-2)"></path>
                        </g>
                    </g>
                </g>
            </g>
        </svg>
    );
}